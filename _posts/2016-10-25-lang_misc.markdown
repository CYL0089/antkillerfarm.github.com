---
layout: post
title:  小众语言集中营, R
category: technology 
---

# 小众语言集中营

## 前言

自从John Warner Backus创立计算机语义学以来，人们发明的计算机语言已不下千种。基本上没有人能够对所有的语言都精通，实际上也没有这个必要。

但我同样不赞成只会一种语言的工程师。因为每种语言之所以存在，必然有其合理之处，只会一种语言会严重局限程序员的眼界。

比如说这篇文章中提到的：

http://imgtec.eetrend.com/blog/5317

“他的单位有一位写Ruby的老员工，一个庞大的工程，代码里面居然只有一个上帝类，就搞定了所有的问题。”

上面这句话，在文中被作者引用来作为不会设计的典范。但是看看作者的知识背景就会发现，这个作者的眼界实际上局限在了面向对象的笼子里，他以为所有的东西都要组成对象才是合理的，反而忽视了设计的目的。

我对这件事的解读是：如果那个老员工的代码能够只用一个类搞定所有的问题，且代码运行、功能扩展都没有大问题的话，那这个老员工就是一个优秀的设计者。即使他的设计思想不是面向对象的。

Linus Torvalds在批评C++的时候，曾说过“好的设计才是第一位的，糟糕的设计用什么语言写出来都是垃圾。”

反过来理解这句话，那就是：语言和设计思想都只是设计的外皮，而不是灵魂。

## 面向过程的语言

1.编译型

首推C语言，没有之一。其次可以学学Pascal。其他的诸如Basic、Fortran、COBOL，基本上已经成为了历史，如果没有工作上的需要，就不要理会了。

2.解释型

一般用的比较多的是bash、Tcl、perl。随便学一个即可，这三个的使用都挺广泛的。

## 面向对象的语言

1.编译型

首推C++。C++支持的编程泛型非常多，从某种意义上说，不是个纯粹的面向对象的语言。如果需要开发Mac和iPhone程序的，可以学学Objective-C。

2.虚拟机型

C#和Java，随便学一个。VB.NET、Groovy、Scala都属备选，各有各的好处，尤其后两者属于现在的热点，学学没准就用上了。

3.解释性

Python、Ruby，随便学一个。

## 科学计算

首推Matlab。这是一种面向矩阵的语言，它的所有数据类型都被理解为矩阵，而不是对象。

## 函数式语言

1.Haskell

这种语言认为所有的数据类型都是函数。

2.Lisp

这种语言认为所有的数据和函数都是列表，也就是“数据结构”课程上所说的广义表。

## 标记语言

1.Tex

这是《The Art of Computer Programming》一书的作者Donald Knuth的杰作。从中可以看到后来的HTML、JavaScript、CSS等的影子。MS Office中的格式刷也是参考了Tex的设计。

Tex最为称道的是数学公式的排版。MS Office直到2007才有了类似的效果。

Tex广泛应用于欧美国家科学论文的排版领域，成为顶级科学期刊事实上的格式标准，可说是科研狗的必备技能。

2.数据描述类

INI和Json。这两个比较简单，也非常好用，不多说了。备选有BSON、YAML、

3.网页类

XML、HTML、JavaScript必修。PHP、ASP、JSP，选修其中之一。Nodejs近来比较流行，值得投资。

## 嵌入式语言

首推Lua。它首先在游戏领域得到广泛使用，现在在其他领域用的也比较多了。我一直在想，如果Lua早发明30年，Emacs会不会使用Lua，而不是Lisp做为内置语言呢？

## 形式语言

并非所有的编程语言都具有实用性，有些语言的创制，另有其目的。

比如Brainfuck语言。这个语言以出名难用著称，在网上，一般被归为奇技淫巧类语言。然而从语义学的角度，这个语言证明了在冯·诺依曼模型上，最多使用8个符号，就可以构建一个图灵完备语言。

更多这类语言的知识参见：

http://www.15yan.com/story/5Y8BZqIGwjg/

# R

R语言是另一个应用较广的数学工具语言和环境，主要应用于统计学和数据挖掘等领域。在这些领域，其影响力甚至超过了Matlab。

R语言的语法来自于1970年代贝尔实验室发明的S语言，因此又被称为“GNU S”。

官网：

https://www.r-project.org/

软件仓库：

https://cran.r-project.org/

https://r-forge.r-project.org/

安装方法:

`sudo apt-get install r-base r-base-dev`

书籍：

R语言的书籍主要有三本。

1.《An Introduction to R》。这个是官网的免费书，焦点集中于语言本身，对标准库没有介绍。

2.《R Reference Card》。一个只有几页纸的卡片式书籍，列出了应用开发中涉及的主要函数的名称。

3.《R in a Nutshell》。篇幅近600页，堪称R语言最权威书籍，兼顾语言和应用两方面。

参考：

http://cos.name/

统计之都（Capital of Statistics，简称COS）成立于2006年5月，是一个旨在推广与应用统计学知识的网站和社区。

http://yihui.name/

谢益辉，Iowa State University博士，目前就职于RStudio。中国R语言会议、COS社区创办者。

http://www.r-user.com/

一个中文的R语言网站

http://blog.fens.me/series-r/

R的极客理想系列文章。作者张丹，R语言资深用户，系统架构师。

http://www.r-tutor.com/

另一个大牛Chi Yau的网站。

https://ask.hellobi.com/blog/asxinyu/5721

300+的R语言资源汇总

https://ask.hellobi.com/blog/EasyCharts/5777

R绘制圣诞树

http://mp.weixin.qq.com/s?__biz=MzIxNjA2ODUzNg==&mid=2651435295&idx=1&sn=968d9950e54c34e2a2ddd4186c28c7c7&chksm=8c73a9c8bb0420de7ea5e709d4dc78dce977677cefdfaec48db6f4532c8613ab6ca0f623bc83#rd

数据分析案例--以上海二手房为例

http://url.cn/42zYptF

最全的训练数据集

## 交互环境

R语言有个和python类似的命令行交互环境。

安装之后，运行R命令即可进入该环境（下文简称为shell），`>quit()`可退出shell。

除此之外，还有第三方提供的GUI环境，最常用的是RStudio，其官网：

https://www.rstudio.com/

下载：

http://www.rstudio.org/download/latest/stable/desktop/ubuntu64/rstudio-latest-amd64.deb

## 执行脚本

R脚本一般以.R为后缀，其执行方法有两种：

1.Linux shell:`/usr/lib/R/bin/Rscript a.R`

2.R shell:`source(a.R)`

## 帮助文档

CRAN虽然提供了各个软件包的帮助文档，然而无论是数据的组织，还是界面，都不如RStudio，建议使用后者的帮助文档。

## 安装软件包

以rjson包为例：

`install.packages("rjson")`

这条命令会让你选择CRAN镜像，国内有三个镜像，速度都不错。

这一步首次做，最好在R shell上进行，RStudio不会让你选择镜像。选定之后，下次安装直接就会连到镜像上，这时使用R shell，还是RStudio，都是一样的效果了。

使用软件包：

`library(rjson)`

此外R还支持从github安装软件包，如下所示：

{% highlight R %}
install.packages("devtools")
devtools::install_github("jlmelville/mnist")
library(mnist)
{% endhighlight %}

## 语言细节

R语言由于早期用户主要是非软件工程人员，因此，它是一个面向过程的函数式语言。

然而正如C语言向C++的演进，以及JavaScript向JQuery的演进一样，面向过程的语言经过一系列非常技巧性的封装之后，都能具备面向对象的能力。参见：

http://blog.fens.me/r-object-oriented-intro/

由于面向对象的特性比较高端，不易掌握，因此这里的讨论仍局限于面向过程领域，以C语言作为对比，列出R语言和它的区别。

### 注释与行

注释以`#`开始至行尾。没有多行注释符号，但可在RStudio中，选中相关行，进行注释。

一般情况下，一行对应一条语句。一行有多个语句时，以`;`分隔。一条语句分散在多行时，以`+`作为续行符号。

### 变量声明

R和python类似，变量使用前无需声明类型。

### 赋值

除了`=`之外，还可以使用`<-、<<-、->、->>`进行赋值。上述符号中，箭头指向的变量为被赋值的变量，因此，R不仅可以进行常规的从右向左赋值，也可进行从左向右的赋值。例如：

`3->a`

### 下标

数组（Array、Vector）下标从1开始。由于所有R变量都被当成向量，因此对于单元素的变量，`a`和`a[1]`是等价的。

列表（List）的下标一般是个name。这里使用一个解析后的json文件作为示例，演示一下在复杂结构中下标的用法。

{% highlight json %}
{"data":[
{"readCount":"97","title":"R1"},
{"readCount":"469","title":"R2"}
]}
{% endhighlight %}

假设这个json文件保存在列表json中，则`"readCount":"97"`需要这样引用：

`json$data[[1]]$readCount`

### for循环

示例：

`for (i in 2:5-1) {print(i)}`

这里需要注意，`2:5-1`等价于`(2:5)-1`，而不是`2:(5-1)`，`:`比`-`的优先级高。

### 返回值

return也是个函数，因此返回值两侧的括号不可省略。

### 字符串长度

R中的字符串不是字符数组，因此使用length是无法得到字符串长度的，应该使用nchar函数。

### paste

paste可将多个字符串连接到一起。这个函数的声明很有意思：

`paste (..., sep = " ", collapse = NULL)`

也就是说R支持不定参数，而且该参数并不一定在最后。可用如下方式避免参数指派上的混乱：

`paste("1st", "2nd", "3rd", collapse = ", ")`

### 自定义函数

示例：

{% highlight R %}
add<-function(x,y){
  return (x+y)
}
{% endhighlight %}

这种方式和JavaScript十分类似。

### 数据格式转换

as库可进行各种常见数据格式的转换，非常好使。

{% highlight R %}
strDates <- c("01/05/1965", "08/16/1975")
dates <- as.Date(strDates, "%m/%d/%Y") 
strDates <- as.character(dates)
{% endhighlight %}

### 操作mysql数据库

1.安装非R依赖。

`install.packages`可以自动处理R依赖，然而它不能处理非R依赖。

`sudo apt-get install libmysqlclient-dev`

2.安装RMySQL包。

`install.packages("RMySQL")`

示例：

{% highlight R %}
conn<-dbConnect(MySQL(), dbname = "ml", username="root", password="123456")
summary(conn)
query<-dbSendQuery(conn, "SELECT * FROM csdn")
data<-fetch(query, n = -1)
dbClearResult(query)
print(data)
dbDisconnect(conn)
{% endhighlight %}

### 内置数据集

R语言本身已经内置了一些数据集，可以`data()`查看之。

### 操作数据集

参考：

https://www.r-bloggers.com/select-operations-on-r-data-frames/

http://www.burns-stat.com/translating-r-sql-basics/

### MNIST

https://github.com/jlmelville/mnist

## ggplot2

ggplot2是目前R上用的比较多的绘图工具集。官网：

http://had.co.nz/ggplot2/

参考：

《ggplot2：数据分析与图形艺术》，Hadley Wickham著。

>注：Hadley Wickham，ggplot2的作者，Rstudio的首席科学家。


