---
layout: post
title:  Java（二）, Python（二）, 孩子的编程语言, Javascript（二）
category: language 
---

# Java各集合类的比较 

<table>
<tr>
<th colspan="2"></th>
<th>有序否</th>
<th>允许元素重复否</th>
</tr>
<tr>
<td colspan="2">Collection</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td colspan="2">List</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td rowspan="3">Set</td>
<td>AbstractSet</td>
<td rowspan="2">否</td>
<td rowspan="3">否</td>
</tr>
<tr>
<td>HashSet</td>
</tr>
<tr>
<td>TreeSet</td>
<td>是（用二叉树排序）</td>
</tr>
<tr>
<td rowspan="3">Map</td>
<td>AbstractMap</td>
<td rowspan="2">否</td>
<td rowspan="3">使用key-value来映射和存储数据，Key必须惟一，value可以重复</td>
</tr>
<tr>
<td>HashMap</td>
</tr>
<tr>
<td>TreeSet</td>
<td>是（用二叉树排序）</td>
</tr>
</table>

# Log4j & SLF4J & Logback

Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。

SLF4J，即简单日志门面（Simple Logging Facade for Java），不是具体的日志解决方案，它只服务于各种各样的日志系统。按照官方的说法，SLF4J是一个用于日志系统的简单Facade，允许最终用户在部署其应用时使用其所希望的日志System。

假设你打算将你使用log4j的产品卖给要求使用JDK 1.4 Logging的用户时，面对成千上万的log4j调用的修改，相信这绝对不是一件轻松的事情。但是如果开始便使用SLF4J，那么这种转换将是非常轻松的事情。

Logback是由log4j创始人设计的另一个开源日志组件。官方网站：

http://logback.qos.ch

上面三者可以组合使用（slf4j+log4j和slf4j+logback），它们的配置文件主要是logback.xml和log4j.properties。

参见：

http://wuyilun2.blog.163.com/blog/static/9853110201111595858365/

# Save/Load序列化对象

代码：

https://github.com/antkillerfarm/antkillerfarm_crazy/blob/master/java/HanLP/KnowlegeModel.java

要点：

1.implements Serializable接口。不但对象本身要实现，它包含的子对象也要实现该接口。

2.save/load函数。

3.不想序列化的成员使用transient关键字修饰。

# 参考

https://mp.weixin.qq.com/s/t1Cx1n6irN1RWG8HQyHU2w

从实际案例聊聊Java应用的GC优化

# python

## python调试

首先：

`import pdb`

然后在需要断点的地方：

`pdb.set_trace()`

然后直接运行脚本即可，其他命令和gdb十分相似。

pdb和gdb的差异主要在于：

1.pdb需要修改代码，而gdb不需要。

2.可以直接运行脚本进入pdb模式，而gdb需要先进入gdb环境，然后才可以运行程序。显然pdb的灵活性比较高。

参考：

https://blog.jamespan.me/2016/06/09/remote-debug-your-python-code

远程调试你的Python代码

https://www.ibm.com/developerworks/cn/linux/l-cn-pythondebugger/index.html

Python代码调试技巧

## python调用GTK函数的一般规则

众所周知，GTK库是用C语言编写的，其相关的文档提供的也是C函数的接口，python接口的文档相对较少，获得也不太容易。因此有必要掌握一下这方面基本的命名规则。（这里只讲方法，对深层次的调用原理不做探究。）

1）类初始化函数

C:`GtkWidget * gtk_button_new (void);`

python:`button = Gtk.Button()`

这里除了把C函数式的写法，替换成python的类的写法之外，并无其他差异。

2）普通类成员函数

C:`void gtk_container_add (GtkContainer *container, GtkWidget *widget);`

python:`button.add(image)`

可以看出，C函数的第一个表示self类指针的参数被省略掉了。

3）回调函数

这里以按钮的click事件回调为例：

C:`void user_function (GtkButton *button, gpointer user_data)`

python:

`button.connect("clicked", self.playToggled)`

`def playToggled(self, w):`

这里的情况要复杂的多。首先在事件回调注册的时候，由于我们并没有给user_data赋值，因此照理说playToggled函数，只有button这一个参数。但实际传递给playToggled函数的有两个参数，self是一个用于占位的参数，w对应button，没有东西对应user_data。

4）用于输出的参数

C:`void gst_message_parse_error (GstMessage *message, GError **gerror, gchar **debug);`

python:`err, debug = message.parse_error()`

这个例子中的gerror和debug都是用于输出的参数。如果只想得到其一，还可用以下方法:

`debug = message.parse_error()[2]`

5）枚举类型

C:

{% highlight c %}
enum GstSeekFlags
{
  GST_SEEK_FLAG_FLUSH,
  ...
}
{% endhighlight %}

python:`Gst.SeekFlags.FLUSH`

6）宏常量

C:`#define GST_CLOCK_TIME_NONE ((GstClockTime) -1)`

python:`Gst.CLOCK_TIME_NONE`

7）类型转换

大多数情况下，类型转换自动完成，并无什么问题。这里只讨论特殊的情况。

C:

{% highlight c %}
gst_element_seek (pipeline, 1.0, GST_FORMAT_TIME, GST_SEEK_FLAG_FLUSH,
                         GST_SEEK_TYPE_SET, time_nanoseconds,
                         GST_SEEK_TYPE_NONE, GST_CLOCK_TIME_NONE))
{% endhighlight %}

python:

{% highlight python %}
self.player.seek(1.0, Gst.Format.TIME, Gst.SeekFlags.FLUSH, Gst.SeekType.SET,\
                 time_nanoseconds, Gst.SeekType.NONE, Gst.CLOCK_TIME_NONE)
{% endhighlight %}

这里首先按照一般的方法，将C代码转化成python代码。但是运行之后，产生如下错误：

`OverflowError: long too big to convert`

究其原因，gst_element_seek的最后一个参数是uint64类型的。但python原生并不支持该类型，而是将之转换成int类型（实际上是int64类型），这样的话，GST_CLOCK_TIME_NONE的值显然超出了int64所能表示的范围。

解决的办法是使用ctypes库，将

`Gst.CLOCK_TIME_NONE`

改为

`c_long(Gst.CLOCK_TIME_NONE).value`

## 参考

https://mp.weixin.qq.com/s/jHnkmpnOz1LApVCLJL-8Tw

如何写出优雅又地道的Python代码？

https://mp.weixin.qq.com/s/5xs1ivkrUAP_Rr9P-EMc5g

代码优化指南：人生苦短，我用Python。这篇blog主要介绍了如何追踪Python脚本的CPU使用情况。

## tqdm

tqdm是一个快速，可扩展的进度条。

代码：

https://github.com/tqdm/tqdm

示例：

{% highlight python %}
from tqdm import tqdm
for i in tqdm(range(9)):
    ...
{% endhighlight %}

效果：

`76%|████████████████████            | 7641/10000 [00:34<00:10, 222.22 it/s]`

## Captcha

Captcha是一个Python验证码库，能够生成音频和图片验证码。

代码：

https://github.com/lepture/captcha

这个库可用于生成大量有标签的验证码，是DL入门的必备工具。

## 参考

https://mp.weixin.qq.com/s/_OmRvwFmvuuOpBf7DQG8IA

Python30个编程技巧

https://www.linuxzen.com/qian-yi-dao-python-3.html

迁移到Python 3

https://www.zhihu.com/question/19698598

Python 2和Python 3有哪些主要区别？

# 孩子的编程语言

## 概述

在孩子中普及编程教育已经是一个趋势了。

参见：

http://www.kidscode.cn/

中国少儿编程网

## Scratch

Scratch是一款由麻省理工学院(MIT) 设计开发的一款面向少年的简易编程工具。适合8～12岁的儿童。

官网：

https://scratch.mit.edu/

安装：

`sudo apt install scratch`

## Squeak

Squeak是一个是一个现代的，开源的，功能齐全的Smalltalk程序设计语言和执行环境。适合9岁以上的儿童。

官网：

http://squeak.org/

## Logo语言的安装

Logo语言是我学习计算机时的启蒙语言。那是初一、初二的时候，当时的电脑还是运行Dos的386系统，我们在原始的命令行下，津津有味的编着代码。那时候电脑可是稀罕物，为了节约上机时间，程序都是事先写到小本本上的，我至今还保留着当时的作业本。

话归正传，说说Linux下Logo语言的安装。

1）到Berkeley的官网下载Logo语言的源代码

http://www.cs.berkeley.edu/~bh/logo.html

2）按照源代码包里面readme的提示，编译之。提示缺少libbsd和libtermcap。

3）`sudo apt-get install libbsd-dev libncurses5-dev`

重新编译即可。

再一次看到熟悉的命令行界面和海龟了:)

## NetLogo

NetLogo是继承了Logo语言的一款编程开发平台,但它又改进了Logo语言只能控制单一个体的不足,它可以在建模中控制成千上万的个体,因此,NetL0go建模能很好地模拟微观个体的行为和宏观模式的涌现及其两者之间的联系。

官网：

http://ccl.northwestern.edu/netlogo/

## Kodu

Kodu是微软推出的面向儿童的可视化编程语言，可以让孩子自己创造PC或XBox游戏。

官网：

https://www.kodugamelab.com/

# Javascript

## CSS动画（续）

### JS细节

# onclick与href='javascript:function()'的区别

1.onclick事件会比href属性先执行。

2.`<a href="javascript:void(0);" onclick="function()"></a>`或者`<a href="javascript:;" onclick="function()"></a>`表示这个链接不跳转，而执行一段js脚本。

## JS特效资料

https://github.com/wagerfield/flat-surface-shader

这个网站提供一种浮动的多边形表面的特效，适合作为登录页的背景。

https://mp.weixin.qq.com/s/p8ll1R9aXc5aELtL3MAEcA

用H5打造用户专属的3D机房（WebGL）

## Monaco Editor

Monaco Editor是MS开源的一个在线代码编辑工具，可提供类似VS code的功能。
官网：

https://microsoft.github.io/monaco-editor/


