---
layout: post
title:  Qt, Python（一）
category: technology 
---

# Qt主循环

这篇文章有个大概的比较和说明：

http://blog.chinaunix.net/uid-20754930-id-1877623.html

以下是我针对Qt5代码（2015.4）的一个研究。

`QApplication::exec`

`QGuiApplication::exec`

`QCoreApplication::exec`

`QEventLoop::exec`

`QEventLoop::processEvents`

`QEventDispatcher::processEvents`

再以下就和具体的平台相关了。

Windows平台：

`QEventDispatcherWin32::processEvents`

它的实现主要是GetMessage+WaitForMultipleObjects，如上文中对MiniGUI的主循环所述。

Unix平台：

`QEventDispatcherUNIX::processEvents`

`QEventDispatcherUNIXPrivate::doSelect`

这个函数主要使用select系统调用来监听事件源。

Android平台：

`QAndroidEventDispatcher::processEvents`

`QUnixEventDispatcherQPA::processEvents`

`QEventDispatcherUNIX::processEvents`

以下和Unix平台相同。

# Qt多线程中connect的使用

近日在研究OpenGL多线程处理时，偶然看到了如下代码：

http://download.csdn.net/detail/zhoukuanbin/7669187

没有CSDN账号的读者，也可以在这里下载：

https://github.com/antkillerfarm/antkillerfarm_crazy/tree/master/Qt/MyGlTest

粗看代码，发现并无特殊的OpenGL处理，理论上应该无法达到一个线程处理渲染，另一个线程处理贴图的目标。但实际编译运行代码，又确实可用。因此这里面一定有什么原因。

{% highlight cpp %}
void ThreadGl::run()
{
    connect(this, SIGNAL(SigCopy()), this, SLOT(Copy()));
    printf("ID 0:%x\n", currentThreadId());
    while(1)
    {
        if(!m_bEndFlag)
        {
            break;
        }

        usleep(16000);
        emit SigCopy();
    }

    qDebug("Copy End\n");
}

void ThreadGl::Copy()
{
    m_glWidgets -> OnTimeOut(m_pImage, m_Formal, m_pthId);
}
{% endhighlight %}

这段代码引起了我的注意。粗一看，connect函数连接的SIGNAL和SLOT都属于同一个对象。而connect函数的第5个参数（这是个有默认值的可省略参数）的默认值为Qt::AutoConnection。

这是Qt官方对Qt::AutoConnection的解释：

* If the receiver lives in the thread that emits the signal, Qt::DirectConnection is used. Otherwise, Qt::QueuedConnection is used. The connection type is determined when the signal is emitted.

按照字面上的意思，既然SIGNAL和SLOT都属于同一个对象，那么这里的Qt::AutoConnection就等同于Qt::DirectConnection。而Qt::DirectConnection与直接调用SLOT函数是一个效果。

于是这里将`emit SigCopy();`替换为`Copy();`，结果程序运行出错。

再试一下，将connect函数的第5个参数设为Qt::DirectConnection，同样有问题。

而如果将之设为Qt::QueuedConnection的话，程序运行一切正常。

综上，Qt在这里的处理，显然认为SIGNAL和SLOT属于**不同的**线程。

那么判断的依据是什么呢？

这里有必要对`emit SigCopy();`中`emit`背后的戏法做一个剖析。

众所周知，emit并非C++关键字，而属于Qt扩展的一部分。Qt为了处理这些扩展，引入了moc工具作为预处理工具。

而moc处理之后，`emit SigCopy();`就变成了`QMetaObject::activate`

`QMetaObject::activate`中使用以下代码，判定信号接收者的线程是否和信号发送者的一致。

{% highlight cpp %}
const bool receiverInSameThread = currentThreadId == receiver->d_func()->threadData->threadId;
{% endhighlight %}

于是问题转化为`receiver->d_func()->threadData`是怎么来的呢？

答案在`QObject::QObject`中：

{% highlight cpp %}
d->threadData = (parent && !parent->thread()) ? parent->d_func()->threadData : QThreadData::current();
{% endhighlight %}

从这里可以看出所谓信号接收者的线程，实际上是接收者对象创建时所处的线程。

回到原来的问题。ThreadGl虽然是Qt的线程对象，但它本身却是在主线程中创建的，所以以它为接收者，实际上就是以主线程为接收者。

显然这个例子代码并没有真正实现OpenGL多线程处理，所有的OpenGL操作实际上都是在主线程完成的。

# Python

## 教程

http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000

国人写的一个中文教程。

## PyPI

PyPI是一个Python语言的软件库管理软件，它的官网是：

https://pypi.python.org/pypi

用户可以在这里查找自己需要的Python包。

Ubuntu下的安装方法是：

`sudo apt-get install python-pip`

使用方法是：

`pip install <package name>`

有的python包因为包含不可移植的二进制文件，使用pip安装的时候会出错。这时，可在ubuntu官网搜索安装相应的python包。

对于可移植的python包，直接使用pip安装即可，在ubuntu官网搜也搜不到的。

pip的cache路径：

win7：

c:\用户\(你的用户名)\AppData\Local\pip\cache\

linux:

~/.cache/pip

离线安装法：

在有网络的机器上安装好相关包之后，使用如下命令可以导出相关安装包（包括依赖包）：

`pip download <package name>`

和apt不同，pip没有自动更新的功能，但可以手动更新：

`pip install --upgrade <package name>`

更换源：

`pip install -i  https://pypi.tuna.tsinghua.edu.cn/simple  <package name>`

指定版本：

`pip install -v pycrypto==2.3`

## IDE

官方自带的IDLE，以现代IDE的观点来看，只是个精致的小玩具而已。

在Anaconda出现之前，ActivePython曾是Windows平台最好的python发行版，它自带的PythonWin是个不错的IDE，但界面还是差了些，比VC6还差的远。

除此之外，我还用过UliPad（2007年前后）。它是国内python的元老级人物limodou（一个70后程序员）的作品。官网：

https://github.com/limodou/ulipad

UliPad的界面就和其他现代IDE差不多了。

最近比较流行的IDE，当属pycharm。官网：

https://www.jetbrains.com/pycharm/

相信熟悉Android Studio和IDEA的同学一定会觉得很亲切。没错，他们都是同一家公司的产品。

## 软件发布工具

### distutils

distutils是python自带的软件发布工具。它的安装脚本一般叫做setup.py，对应的配置文件叫做setup.cfg。

它的文档参见：

https://docs.python.org/2/distutils/index.html

### distutils-extra

distutils-extra在distutils的基础上做了扩展，提供诸如i18n之类的支持。如果没有安装，会报如下错误：

`error: error in setup.cfg: command 'build' has no such option 'i18n'`

安装方法:

`sudo apt-get install python-distutils-extra`

### setuptools

setuptools是一个更强大的distutils扩展，它也是PyPI的基础。它的安装脚本通常以ez_setup.py的形式出现。

它的文档参见：

https://pythonhosted.org/setuptools/setuptools.html

安装方法:

`sudo apt-get install python-setuptools`

### Easy Install

setuptools提供的一个工具，可从网络下载安装外部依赖文件。

它的文档参见：

https://pythonhosted.org/setuptools/easy_install.html

## PyGObject

谈起Python调用GTK+的话题，在GTK+ 2的时代可以使用PyGTK库。它的官网是：

http://www.pygtk.org/

但由于PyGTK库本质上来说，使用了和一般的Python调用C库一样的方法，因此每导入一个库，都需要编写大量的接口文件。GNOME工程有那么多项目，采用这种办法显然是不太可行的。

于是，GNOME工程发起了GObject Introspection项目。众所周知，GNOME工程诸多项目的基石是GObject。这是一个很成功的类型系统，使用该系统可以获得远比普通C库更强的支持。GObject Introspection项目的目标就是创建一个用于跨语言绑定的中间层。这个项目的官网是：

https://wiki.gnome.org/Projects/GObjectIntrospection

随着GObject Introspection项目的进展，越来越多的语言绑定开始使用这套系统，python也不例外。PyGObject项目就是这种方法的成果，目前它已经取代了PyGTK库，成为GTK+ 3时代Python调用GTK+的官方方案。它的官网是：

https://wiki.gnome.org/Projects/PyGObject

相关的API参考文档可参见：

http://lazka.github.io/pgi-docs/

指南文档可参见：

http://python-gtk-3-tutorial.readthedocs.org/en/latest/

安装方法：

Ubuntu下，可以执行：

`sudo apt-get install python-gi python3-gi`

Windows下，有个PyGObject for Windows项目，该项目的官网是：

http://sourceforge.net/projects/pygobjectwin32/files/

PyGObject的helloworld程序可参见：

https://github.com/antkillerfarm/antkillerfarm_crazy/blob/master/python/pygtk-helloworld.py

这里必须指出的是，PyGObject依赖的接口文件只有在dev包中才有。安装相关Glib项目时，一定要选择名称以-dev结尾的包。

## 相关资源

http://www.lfd.uci.edu/~gohlke/pythonlibs/

Unofficial Windows Binaries for Python Extension Packages

## 参数传递

基本数据类型：数值型，字符串，布尔，是值传递；其他的是引用传递，包括类类型，列表，字典。

## list操作

{% highlight python %}
L.append(var)   #追加元素
L.extend(list)  #追加list，即合并list到L上
{% endhighlight %}



## Python中的括号

Python主要有三种数据类型：字典（Key/Value对）、列表（变长数组）、元组（定长数组）。其分别由花括号，中括号，小括号表示。如：

字典：dic={'a':12,'b':34}

列表：list=[1,2,3,4]

元组：tup=(1,2,3,4)

## python中的下划线

1.在解释器中，‘_’代表交互式解释器会话中上一条执行的语句的结果。

2.‘_’ 作为临时性的名称使用。这样，当其他人阅读你的代码时将会知道，你分配了一个特定的名称，但是并不会在后面再次用到该名称。例如：

`for _ in range(n):`

3.用于实现国际化和本地化字符串之间翻译查找的函数名称。例如：

`_("Hello")`

4.`_xxx`：protected变量。

5.`__xxx`：private变量。

6.`__xxx__`：系统内置变量。

## python中的星号（ * ）

### 定义方法时

**一个星号**：收集其余位置的参数放到一个元组中。例子：

{% highlight python %}
def prints(*arg):
    print arg;
prints (1,2,3,4,5,6,7)
#result: (1,2,3,4,5,6,7) 
{% endhighlight %}

**两个星号**：收集其余带有关键字的参数，并将其放到一个字典中。例子：

{% highlight python %}
def prints(**arg):
    print arg
prints (a=1,b=2,c=3,d=4,e=5,f=6,g=7)
#result: {‘a’: 1, ‘c’: 3, ‘b’: 2, ‘e’: 5, ‘d’: 4, ‘g’: 7, ‘f’: 6}
{% endhighlight %}

### 调用方法时

{% highlight python %}
def add(x,y):
    print x+y

para = (1,2)
add(*para)
#result: 3

kkwd = {'x' :1,'y':2}
add(**kkwd)
#result: 3
{% endhighlight %}

参考：

http://blog.csdn.net/yzj99848873/article/details/48025593

Python星号（ * ）操作符的用法

## pass语句

{% highlight python %}
def iplaypython():
       pass
{% endhighlight %}

定义一个函数iplaypython，但函数体部分暂时还没有完成，又不能空着不写内容，因此可以用pass来替代占个位置。

## 对象的属性

`__dict__`：对象的可变属性。

`__slots__`：对象的不可变属性，一旦创建就不可修改。

不是所有的对象都有`__dict__`属性，但多数对象有。

`dir(Foo())`：列出Foo()创建的对象的所有属性（不仅包括`__dict__`和`__slots__`，还包括其他的属性）。

参考：

http://www.cnblogs.com/ifantastic/p/3768415.html

dir()与`__dict__`，`__slots__`的区别



