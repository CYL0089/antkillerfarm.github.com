---
layout: post
title:  Clojure, Spring, Python（二）
category: language 
---

# Clojure

Clojure是Lisp语言在JVM上的实现。源代码以.clj为后缀。

官网：

http://clojure.org/

Clojure的安装主要有两种方法：

1.

`sudo apt-get install clojure1.6`

2.Clojure的全部功能都被放在clojure-1.8.0.jar中，因此实际上并不需要安装。所谓安装，不过是下载jar，然后让程序能够找到jar即可。因此，更好的办法是利用我们下面提到的leiningen，自动下载相关依赖。

## leiningen

leiningen是Clojure的自动管理工具。

官网：

http://leiningen.org/

project.clj是Leigingen为项目添加的配置文件，类似于Maven的pom.xml。

project.clj中可以定义项目所需的Clojure的版本，并自动下载依赖。因此，很多Clojure项目在依赖上，往往只写leiningen和maven，根本就不提Clojure。这一点和其他编程语言，包括同为JVM语言的scala，还是差异挺大的。

## Hello World

1.

`lein new app hello`

2.

`cd hello`

`lein run`

这里要注意路径，一定要在project.cl所在的路径下执行lein命令，否则会报如下错误：

`No :main namespace specified in project.clj.`

参见：

https://tonydeng.github.io/2016/07/19/leiningen-clojure-hello-world/

## JavaFX

JavaFX和Clojure的结合，本来不是什么新鲜的东西，然而由于相关环境（JDK、leiningen）的演进，网上的demo已经大多不可用了。

这些变动主要包括：

1.由于JDK7的较新版本之后，JavaFX已经集成到JDK中，因此JavaFX的运行时jar不再需要了。相关依赖需要去除。

2.由于leiningen新版本的改变，现在main函数必须在源代码和工程文件中显式定义。

代码参见：

https://github.com/antkillerfarm/antkillerfarm_rubbish/tree/master/clojure/javafx

# Spring

Spring是一个Java Web应用框架。官网：

http://spring.io/

## Ubuntu安装Eclipse、Spring

1.安装Eclipse

`sudo apt-get install eclipse`

2.安装Spring

`sudo apt-get install libspring-web-portlet-java`

注意：ubuntu软件仓库中还有一个叫做spring的游戏引擎，不要弄错了。

http://www.mkyong.com/spring/quick-start-maven-spring-example/

http://wiki.jikexueyuan.com/project/spring/

## Restful

http://spring.io/guides/gs/rest-service/

## Spring Boot

https://www.tianmaying.com/tutorial/deploy-spring-boot-application

http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html

Spring Boot默认的配置文件

## WebService

https://spring.io/guides/gs/producing-web-service/

http://localhost:9999/ws/countries.wsdl

# Python

## 特殊语法：filter、map、reduce、lambda

**filter(function, sequence)**：对sequence中的item依次执行function(item)，将执行结果为True的item组成一个List/String/Tuple（取决于sequence的类型）返回。

{% highlight python %}
>>> def f(x): return x % 2 != 0 and x % 3 != 0 
>>> filter(f, range(2, 25)) 
[5, 7, 11, 13, 17, 19, 23]
{% endhighlight %}

**map(function, sequence) **：对sequence中的item依次执行function(item)，将执行结果组成一个List返回。

{% highlight python %}
>>> def cube(x): return x*x*x 
>>> map(cube, range(1, 11)) 
[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]
{% endhighlight %}

**reduce(function, sequence, starting_value)**：对sequence中的item顺序迭代调用function，如果有starting_value，还可以作为初始值调用，例如可以用来对List求和。

{% highlight python %}
>>> def add(x,y): return x + y 
>>> reduce(add, range(1, 11)) 
55 (PS: 1+2+3+4+5+6+7+8+9+10)
{% endhighlight %}

**lambda**：这是Python支持一种有趣的语法，它允许你快速定义单行的最小函数，类似与C语言中的宏，这些叫做lambda的函数，是从LISP借用来的，可以用在任何需要函数的地方： 

{% highlight python %}
>>> g = lambda x: x * 2 
>>> g(3)
6
>>> (lambda x: x * 2)(3) 
6
{% endhighlight %}

参考：

http://www.cnblogs.com/longdouhzt/archive/2012/05/19/2508844.html

Python特殊语法：filter、map、reduce、lambda

## 字符串格式化

目前python的字符串格式化，有两种style：Old Style和New Style。两者的区别详见：

https://pyformat.info/

这里仅给出几个简单示例：

Old Style：`'%s %s' % ('one', 'two')`

New Style：`'{} {}'.format('one', 'two')`

## `__init__.py`的作用

`__init__.py`文件的作用是将文件夹变为一个Python模块,Python 中的每个模块的包中，都有`__init__.py`文件。

示例：

{% highlight python %}
# package
# __init__.py
import re
import urllib
import sys
import os

# a.py
import package 
print(package.re, package.urllib, package.sys, package.os)
{% endhighlight %}

`__init__.py`中还有一个重要的变量，`__all__`,它用来将模块全部导入。

{% highlight python %}
# __init__.py
__all__ = ['os', 'sys', 're', 'urllib']

# a.py
from package import *
{% endhighlight %}

参见：

http://www.cnblogs.com/Lands-ljk/p/5880483.html

Python `__init__.py`作用详解

## defaultdict()和namedtuple()

defaultdict()和namedtuple()是collections模块里面2个很实用的扩展类型。

`from collections import defaultdict, namedtuple`

defaultdict()：返回一个和dictionary类似的对象，和dict不同主要体现在2个方面：

1.可以指定key对应的value的类型。

2.不必为默认值担心，换句话说就是不必担心有key没有value这回事。总会有默认的value。

`d = defaultdict(list)`

该语句创建一个defaultdict类型（你可以想象为dict类型），value的类型是list。

namedtuple()：namedtuple创建一个和tuple类似的对象，而且对象拥有可以访问的属性。这对象更像带有数据属性的类，不过数据属性是只读的。

{% highlight python %}
>>> from collections import namedtuple
>>> TPoint = namedtuple('TPoint', ['x', 'y'])
>>> p = TPoint(x=10, y=10)
>>> p
TPoint(x=10, y=10)
>>> p.x
10
>>> p.y
10
{% endhighlight %}

PS：非常类似C语言的结构体，不过数据属性是只读的。

参考：

http://www.cnblogs.com/herbert/p/3468294.html

再谈collections模块defaultdict()和namedtuple()

## @的用法

@在python中是装饰器的意思，它的用法比较复杂。参见：

https://www.zhihu.com/question/26930016

如何理解Python装饰器？

## range & xrange

1.range会直接生成一个list对象。

2.xrange则不会直接生成一个list，而是每次调用返回其中的一个值。

所以xrange做循环的性能比range好，尤其是返回很大的时候，尽量用xrange吧，除非你是要返回一个列表。

>Python 3只有range，效果和Python 2的xrange相仿，且支持slicing。

参考：

http://www.cnblogs.com/zhangjing0502/archive/2012/05/16/2503880.html

Python的range和xrange

## 时间、日期数据的格式处理。

时间数据上的格式处理，主要指strftime和strptime函数。其中前者可将时间数据转换成指定格式的字符串，而后者则将字符串转换成时间数据。

{% highlight python %}
import time
a = "2013-10-10 23:40:00"
timeArray = time.strptime(a, "%Y-%m-%d %H:%M:%S")
otherStyleTime = time.strftime("%Y/%m/%d %H:%M:%S", timeArray)
{% endhighlight %}

日期方面也是类似的做法。

## 星期处理

`datetime(2002, 12, 4).isoweekday() == 3`

`datetime(2001, 12, 31).isocalendar() == (2002, 1, 1)#(year, week number, weekday)`

从上面的例子还可以看出，isocalendar可以完美的处理跨年问题。

## 处理eml文件

代码示例：

https://github.com/antkillerfarm/antkillerfarm_crazy/blob/master/python/misc/hello_eml.py

这个示例主要使用email包来解析eml文件。

同时为了处理其中的html的内容，还用到了Beautiful Soup包。其网址为：

https://www.crummy.com/software/BeautifulSoup/

参见：

https://mp.weixin.qq.com/s/p86yvl3uAm3FXw4V9NlNoA

一文带你上手Python网页抓取神器BeautifulSoup库

## Sqlite

Ubuntu下的安装方法是：

`sudo apt-get install sqlite`

Python自带了pysqlite包，用于调用sqlite。

pysqlite的helloworld程序可参见：

https://github.com/antkillerfarm/antkillerfarm_crazy/blob/master/python/pysqlite-helloworld.py

可以使用sqlite_bro软件包，查看sqlite数据库。安装方法：

`sudo pip install sqlite_bro`

## 如何通过需认证的代理获取HTTP网页

Python内置的urllib和urllib2模块都可用于获取HTTP网页，但使用范围是不同的。urllib只支持HTTP 0.9和HTTP 1.0，所以如果只是使用代理可以使用urllib.FancyURLopener类，如果该代理还需要认证的话urllib就不行了。因为代理认证是HTTP 1.1中引入的。

这时可以考虑使用urllib2模块。代码如下：

{% highlight python %}
import urllib2
l_proxy_info = {
'user' : 'user',
'pass' : 'pass',
'host' : 'host',
'port' : 3128
}

l_proxy_support = urllib2.ProxyHandler({"http" : "http://%(user)s:%(pass)s@%(host)s:%(port)d" % l_proxy_info})
l_opener = urllib2.build_opener(l_proxy_support, urllib2.HTTPHandler)

urllib2.install_opener(l_opener)
usock = urllib2.urlopen('http://www.sohu.com')
{% endhighlight %}

