---
layout: post
title:  Clojure, Groovy, Lisp, Javascript在客户端的使用
category: language 
---

# Clojure

Clojure是Lisp语言在JVM上的实现。源代码以.clj为后缀。

官网：

http://clojure.org/

Clojure的安装主要有两种方法：

1.

`sudo apt-get install clojure1.6`

2.Clojure的全部功能都被放在clojure-1.8.0.jar中，因此实际上并不需要安装。所谓安装，不过是下载jar，然后让程序能够找到jar即可。因此，更好的办法是利用我们下面提到的leiningen，自动下载相关依赖。

## leiningen

leiningen是Clojure的自动管理工具。

官网：

http://leiningen.org/

project.clj是Leigingen为项目添加的配置文件，类似于Maven的pom.xml。

project.clj中可以定义项目所需的Clojure的版本，并自动下载依赖。因此，很多Clojure项目在依赖上，往往只写leiningen和maven，根本就不提Clojure。这一点和其他编程语言，包括同为JVM语言的scala，还是差异挺大的。

## Hello World

1.

`lein new app hello`

2.

`cd hello`

`lein run`

这里要注意路径，一定要在project.cl所在的路径下执行lein命令，否则会报如下错误：

`No :main namespace specified in project.clj.`

参见：

https://tonydeng.github.io/2016/07/19/leiningen-clojure-hello-world/

## JavaFX

JavaFX和Clojure的结合，本来不是什么新鲜的东西，然而由于相关环境（JDK、leiningen）的演进，网上的demo已经大多不可用了。

这些变动主要包括：

1.由于JDK7的较新版本之后，JavaFX已经集成到JDK中，因此JavaFX的运行时jar不再需要了。相关依赖需要去除。

2.由于leiningen新版本的改变，现在main函数必须在源代码和工程文件中显式定义。

代码参见：

https://github.com/antkillerfarm/antkillerfarm_rubbish/tree/master/clojure/javafx

# Hadopp生态圈的语言分布

| 项目 | 语言 |
|:--|:--|
| Hadoop | Java |
| Spark | 主要scala，少量Java |
| Kafka | 主要Java，少量scala |
| Storm | 主要Java，少量Clojure |

这里需要指出的是，Storm虽然被称为是Clojure语言的最知名作品，然而Clojure所占的代码比并不高，还是Java居多。

# Groovy

Groovy是另一种JVM语言，也是与Java最兼容的语言。普通Java代码可以无修改的在Groovy中编译。Groovy源代码以.groovy为后缀。

Groovy使用Gradle或Grape作为自动管理工具，其中后者是Groovy原生支持的，但是现在已经不如前者流行了。

官网：

http://www.groovy-lang.org/

代码参见：

https://github.com/antkillerfarm/antkillerfarm_rubbish/tree/master/groovy/javafx

# Lisp & GUI

客观的说，目前开源领域并没有很好用的和Lisp配套的GUI工具集，几个开源实现要么完工度不高，要么过于古老，好几个的样式都是90年代中期的风格。

更有人指出，GUI基本上是OO语言的天下了，Lisp根本不适合干这个事。

不过事实的真相是：

1.最早的交互式GUI生成工具是用Lisp写的。没错，就是苹果乔教主旗下的Interface Builder，时间是1986年。

2.PTC公司的CAD系统是用Lisp和C++写的。

3.苹果公司早期使用MCL作为GUI开发语言（from 1984），因此那个时代有大量的程序是用Lisp写的。包括Mac上最早的MS Word。Objective-C是乔教主到NextStep之后的事，最初和苹果并无交集。

4.由于Mac在艺术家群体的流行。很多音乐软件是用Lisp写的，包括Open Music, PWGL, ScoreCleaner, Igor Engraver和Symbolic Composer等。

5.有家叫做LispWorks（From 1989）的公司提供对Lisp GUI的商业支持，而且提供的界面并不逊色于GTK、Qt等当代GUI工具集。上面提到的音乐软件基本上都是基于LispWorks的。

综上可见，Lisp开发GUI不是可能性的问题，而是一个有待重新发掘的问题。

# Javascript在客户端的使用

Javascript在服务器前端的成功，促使人们思考其在客户端的使用。

最早的尝试，是MS提供的web broswer控件（例如MFC的CHtmlView类）。然而，当时的目的，并不是美化应用程序外观，而只是给程序提供一个访问互联网的机会。其最常见的用处，就是给About添加一个网站链接。这种方式不光用途简陋，更关键的是从外观来看，网页和应用程序完全是两种风格。

网站的外观在随后的几年中进化的很快，由于CSS和Javascript的出现，网页前端不再是一成不变的静态网页，而是具有了一定的动画和交互能力。强大的功能促进了分工的发展，网站设计逐渐分成了前端和后端两大工种。这种分工又促进了网页交互技术的进步。

反观普通的应用程序，由于受限于编程的复杂度，前端人员一直难于介入，很多年都处于停滞阶段。这期间一些不甘平庸的公司，在UI技术方面也做了一些尝试。

首先是DirectUI。这个是MS对于Win32窗口模型的一个重大改进。

在原始的Win32窗口模型中，每个控件都是一个窗口，拥有一个窗口句柄（相当于窗口资源的描述符）。窗口事件的处理和资源管理都在OS层面进行，开销比较大。（比如包含10000个按钮的窗口怎么处理的问题）窗口之间的交互，比如透明、动画，也由于需要跨窗口句柄，而变得非常复杂。

DirectUI的思路，是将控件降级为贴图，并接管整体窗口事件的处理，以模拟的方式实现控件的行为。开销和扩展性得到了很大的提升。

DirectUI技术最早出现在Windows XP中。比如，“我的电脑”左侧的控制面板。由于它的HWND的名字叫做DirectUI，故名。GTK项目实际上也采用了类似的方案。

DirectUI技术国内做的比较好的有:

https://www.douban.com/group/topic/27583755/

各种DirectUI技术，普遍引入了UI配置文件的概念，而且UI配置文件的功能也越来越强。比如，GTK的设计器Glade，早期的时候是根据UI设计，导出代码，但现在已经改为导出UI配置文件了。

然而，由于低层实现的限制，这些UI配置文件语法各异，虽然有设计器来简化设计难度，但注定不能做的太复杂。因此，功能上无论如何都无法与网页相比，更不必说和HTML 5相比了。

2012年以后，以CEF（Chromium Embedded Framework）和XULRunner为代表的浏览器派，开始逐渐崭露头角。从此，开发桌面应用程序，不再是Javascript的禁区。桌面应用UI和网页前端开始呈现融合的局面。

# Python

## 参考（续）

http://blog.csdn.net/linda1000/article/details/8315892

单引号、双引号和三双引号的区别

https://mp.weixin.qq.com/s/czqO4Lo1Jt9zqg2UKNlLYg

手把手教你用Python创建微信聊天机器人

https://mp.weixin.qq.com/s/wIXCIMzZmh75SV-qJIKbCw

Python程序员最常犯的10个错误，你中招了吗？

https://mp.weixin.qq.com/s/W1j4G_QQqlzDYru231dZFA

Python：编写条件分支代码的技巧

http://www.cnblogs.com/Python666/p/7506546.html

Python单例模式

https://mp.weixin.qq.com/s/ST7TQ5Wkn_owv5bpTiTKVA

2018年最好用的5个python网站开发框架

https://mp.weixin.qq.com/s/3nr8uHnRoSgs-Zu6QxGiqw

Python实现数据库一键导出为Excel表格！大大的增加了工作效率！

https://mp.weixin.qq.com/s/dmJI2GlzgUJgYllfVOPt4g

两句话轻松掌握Python最难知识点

https://mp.weixin.qq.com/s/PkzD1ig_D5AIUTkO5zH8pQ

Python字节码介绍

https://mp.weixin.qq.com/s/_ZvF6jK5Jo4rFGwHvEoAig

一文读懂Python装饰器由来

https://mp.weixin.qq.com/s/RdnAQPAn9E8qDvtnCEgcKw

Tkinter可视化窗口

https://mp.weixin.qq.com/s/_fi4fpfN8Whe7_ZpkPL0tA

怎么给Python写C扩展？

https://mp.weixin.qq.com/s/-erFsz8NvLZ5mOIXyDosFg

使用PyInstaller将python转成可执行文件exe笔记

https://mp.weixin.qq.com/s/b19SLduKoiOIeE5CA3ZOjg

Python标准库之LRU缓存实现学习

https://mp.weixin.qq.com/s/0jjJrclscaA5LkdhHUNkUg

Python的进阶：copy()与deepcopy()区别

https://mp.weixin.qq.com/s/VPCUd5op6Vd-b0LbFEMSYQ

秒懂Python编程中的if __name__ == 'main' 的作用和原理

https://mp.weixin.qq.com/s/FtlAkInyXgvUxDnSCikTIw

全面深入理解Python面向对象编程

https://mp.weixin.qq.com/s/_PtdgGElw0mvr_rRm5xrCg

Python性能优化的20条招数

https://mp.weixin.qq.com/s/0Rpbuo7LCRo1SnbE8NcH4Q

快速学习Python的全套14张思维导图

https://mp.weixin.qq.com/s/ODA74xgoS8X1HFxp4BfshQ

如何将Python自然语言处理速度提升100倍：用spaCy/Cython加速NLP

https://mp.weixin.qq.com/s/Cujl2nxITCuZL7B72uKVrQ

为什么Python这么慢？

https://mp.weixin.qq.com/s/a3YTmQMfpnviHnidXrhYtg

这17个骚操作你都Ok吗

https://zhuanlan.zhihu.com/p/41293278

把python翻译成C++

https://mp.weixin.qq.com/s/KCiR6ZE1EpYVfySaCG097A

上半年最常见的Python面试题

https://mp.weixin.qq.com/s/0dw2LHsIKFv8B_JaIMoekg

python 字符编码处理总结

https://mp.weixin.qq.com/s/fTs_r7DLbLWoos4uRM3KYA

10个Python常见面试题，这些弄不明白不要说学过Python！

# 大数据平台参考资源

https://mp.weixin.qq.com/s/nqOvcKtxpqehWFO4XkXr5g

为减少用户电话排队，阿里研发了智能客服调度系统

https://mp.weixin.qq.com/s/lc9fWkEVt1kG5Mw3Xeuv3g

Apache Beam实战指南：手把手教你玩转KafkaIO与Flink

