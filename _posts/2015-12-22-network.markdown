---
layout: post
title:  网络杂谈, Camera, Ubuntu使用技巧（二）, Fedora
category: technology 
---

# 网络杂谈

## 集线器&交换机&路由器

1.集线器，又名HUB。一般只起增强信号的作用，并不对流经的数据进行处理。数据转发采用广播方式，只适合少量终端设备的情况。

2.交换机。它会对转发数据的数据链路层（OSI第二层）进行处理。

2.路由器。它会对转发数据的网络层（OSI第三层）进行处理。

以上都是一些原始定义，实际情况中，由于都是网络数据交换设备，跨界的情况随着硬件的升级，而屡见不鲜。比如现在的集线器，多数也有简单的数据处理能力；而现在的交换机，有的也有第三层处理能力（比如三层交换机）。

以我的经历为例，2003年左右，大学宿舍的兄弟们就使用集线器，进行联网游戏。

2007年，换用交换机，和合租的同事，一起上网。

2010年，换用无线路由器，手机也可以wifi上网了。

## XMPP

XMPP(Extensible Messaging Presence Protocol)和SIP(Session Initiation Protocol)都是应用层的数据交换协议。作为它们前辈的HTTP虽然取得很大成功，但也存在如下问题：

1.内容形式主要限定为html，对于传输非界面数据的应用来说，效率不高，也不专业。

2.HTTP基于Client发送请求，Server响应的模式。对于VOIP这样的应用来说，Server主动发送数据的能力显然更关键。

XMPP和SIP的特点如下表所示：

<table>
  <tr>
    <th width="20%"></th>
    <th width="40%">XMPP</th>
    <th width="40%">SIP</th>
  </tr>
  <tr>
    <td>核心协议的目的</td>
    <td>服务于结构化的数据交换</td>
    <td>服务于连接的建立</td>
  </tr>
  <tr>
    <td>核心外扩展</td>
    <td>添加Jingle协议支持面向连接的业务</td>
    <td>添加SIMPLE协议支持即时通信业务</td>
  </tr>
  <tr>
    <td>应用支持和扩展性</td>
    <td>优</td>
    <td>一般</td>
  </tr>
  <tr>
    <td>数据格式</td>
    <td>XML，易解析</td>
    <td>文本，不易解析。</td>
  </tr>
  <tr>
    <td>通道方式</td>
    <td>控制和数据通道是一体的，Clent只与Server建立连接，而Client与client之间是没有连接的。Client之间传送的通道是：Client1-->Server1-->Server2-->Client2。这种方式看起来扩展性差，Server压力很大，但是能够实现很好的业务功能，比如留言、广播、群聊、状态更新、Blog、微博、数据共享等等。</td>
    <td>连接建立通道与数据传送通道是各自独立的，连接建立在Client与Server之间，而数据传送通道是在Client-->Client之间直接进行的。这个对视频、语音和文件传送业务很合适，但是不适合其他形式的应用。</td>
  </tr>
  <tr>
    <td>底层协议</td>
    <td>TCP and TLS only</td>
    <td>UDP, TCP and TLS</td>
  </tr>
  <tr>
    <td>连接方式</td>
    <td>单向连接，只有Client可以向Server发起连接请求，Server不会向Client发起连接。这样便于NAT和firewall的穿越。</td>
    <td>双向对称，客户端和服务器都可以主动发起连接请求并响应，这种对称连接的方式在穿越NAT和firewall的时候，带来很大的复杂性，无法保证穿越NAT。</td>
  </tr>
  <tr>
    <td>前景</td>
    <td>开源实现众多，应用广泛。且被Google、MS、Facebook等巨头支持，前景乐观。</td>
    <td>核心外业务没有起色。核心业务也遭到Jingle协议的挑战。</td>
  </tr>
</table>

参考文献：

http://my.oschina.net/linuxhunter/blog/35370

基于loudmouth的XMPP客户端DEMO

http://xmpp.org/xmpp-software/

这个网页列出了XMPP的各种客户端、服务器以及库的实现。在我们的项目中，服务端使用Openfire，嵌入式客户端使用gloox。

## osip & eXosip

osip是SIP协议的一个开源实现。其官网为：

http://savannah.gnu.org/projects/osip

eXosip在osip上封装了一层，简化了在多媒体会话方面SIP协议的使用。其官网为：

http://savannah.nongnu.org/projects/exosip/

## NTP

Network Time Protocol，是用来让计算机之间实现时间同步的协议。

网上可用的NTP Server列表，可参见：

http://www.pool.ntp.org/en/

NTP的Client有很多，这里使用ntpclient软件。它的官网：

http://doolittle.icarus.com/ntpclient/

调试的时候，可以使用如下命令设置时间：

`sudo date -s 10:00:00`

修改之后，可用`date`命令查看系统当前时间，确认修改的效果。

ntpd是NTP的另一个实现，既可以当Server，也可以当Client，已经被集成进busybox。

## socket通信基本流程

### TCP

{% highlight text %}
服务器端                           客户端
1.创建socket                       1.创建socket
2.bind                             2.listen
4.accept
----等待客户端连接----              3.connect
5.读数据（recv）                    4.写数据（send）
6.写数据（send）                    5.读数据（recv）
7.关闭socket（closesocket）         6.关闭socket（closesocket）
{% endhighlight %}

### UDP

{% highlight text %}
服务器端：                          客户端
1.创建socket                       1.创建socket
2.bind                             2.bind
3.recvfrom                         
----等待连接----                    3.sendto
4.sendto                           4.recvfrom
5.关闭socket（closesocket）         5.关闭socket（closesocket）
{% endhighlight %}

## WIFI WPS

WPS分为PBC(BUTTON)和PIN两种方式

### PBC

按WPS按钮实现WPS安全连接。

在AP中，在WPS设置中,设置为启用。

按一下客户端(无线网卡)上的WPS按键,搜索WPS网络。

按一下AP上的WPS按键,WPS开始链接协商,片刻后WPS安全连接成功建立。

### PIN

1.PIN(Internal Registra, 相对于AP而言)：通过在路由器中输入客户端PIN码来实现WPS安全连接。

在WPS设置中,把状态设置为启用。

打开客户端WPS设置软件,选择在路由器中输入PIN的方式连接,同时软件上还会显示客户端当前的PIN码。

打开路由器界面,在WPS模式里选择PIN模式,然后输入客户端的PIN码, 点添加新设备,一会儿后,WPS安全连接成功建立。

2.PIN(External Registra, 相对于AP而言)：通过输入AP的PIN码实现WPS安全连接。

在AP中，在WPS设置中,设置为启用。

记住AP的PIN码,然后打开客户端（无线网卡）WPS设置软件,选择以AP的PIN码来进行连接。

输入完PIN码后,点下一步,一会儿后,WPS安全连接成功建立。

# Camera

常见的Camera从软件角度，可分为三类：

1.Soc Camera。

2.USB Camera。

3.IP Camera。

其中，前两类设备需要相关的驱动程序。Linux内核配置方法如下：

{% highlight text %}
Device Drivers --->
    <*> Multimedia support --->
    [*]   Cameras/video grabbers support
    [*]   Media USB Adapters  --->
        <*>   USB Video Class (UVC)
        <*>   GSPCA based webcams  --->  
    [*]   V4L platform devices  --->
        <*>   SoC camera support
{% endhighlight %}

UVC是Microsoft与另外几家设备厂商联合推出的为USB视频捕获设备定义的协议标准，目前已成为USB org标准之一。

GSPCA同样是一种标准，早期的很多摄像头用的就是这一标准。

这两类设备的应用层接口为V4L2。教程可参见：

http://blog.csdn.net/mmz_xiaokong/article/details/5666993

对于UVC设备，可以用相关工具直接获取图像。常用的工具有：

GTK+ UVC Viewer

http://guvcview.sourceforge.net/

luvcview

https://github.com/ksv1986/luvcview

IP Camera无须驱动，只要提供网口就行了。有的设备支持wifi，连网口也省了。

IP Camera的应用层接口一般为网络协议接口，如TCP/IP、HTTP、RTP/RTSP等。

# Fedora

Fedora作为主要的Linux发行版之一，我虽然用的不多，但实际上这却是我最早接触的Linux发行版。后来换用Ubuntu，很大的原因是因为：这是Google为Android选择的开发平台。

最近因为工作需要重新捡起了Fedora。但公司所用的版本太过古老，还是2009年的Fedora 12。所以想了一下，开始试用最新的Fedora 22。这里是使用过程中的一些操作笔记。

## 安装

https://getfedora.org/

这是官方的下载地址。这里我用的是Workstation版本。

Fedora 22的默认桌面是GNOME 3.16，这一版的外观借鉴了Mac OS X的一些设计，让人眼前一亮。

## 安装软件

Fedora 22使用dnf替代yum。因此安装基本gcc开发环境，可用如下命令：

`dnf install gcc kernel-devel patch bison flex subversion`

如果下载速度较慢的话，可以在/etc/dnf/dnf.conf最后添加：

`fastestmirror=true`

保存后，执行

{% highlight bash %}
$ sudo dnf clean all
$ sudo dnf makecache
{% endhighlight %}

此外，和Ubuntu一样，Fedora也有自己的网站可以查询软件包信息：

https://admin.fedoraproject.org/pkgdb/

## 共享文件夹

我用的是VirtualBox的虚拟环境，因此除了在VirtualBox中，设置共享文件夹之外，还需对Fedora进行如下操作：

1.添加用户到vboxsf中。

`usermod -a -G vboxsf <your user name>`

2.重启。（这一步必不可少，否则上面的配置不会生效。）

这样就可以在Fedora中浏览共享文件夹了。

# Ubuntu使用技巧（二）

## Ubuntu 16.04使用手记

Ubuntu 16.04正式发布（2016.4.21）之后，我第一时间下载了下来。

平心而论，虽然厂商已经很努力，但是Ubuntu的版本升级，仍然存在诸多不兼容的问题。我的电脑最初装的是12.04，后来利用apt升级为14.04。然而，从这次的升级体验来说，不仅升级耗时远比重新安装多，而且有些软件并不能自动升级到新版本，因此，就存在和Ubuntu新版本的兼容问题。而这次16.04的升级更绝，我升级之后，电脑直接不能开机了。因此，必须重新安装Ubuntu。

硬盘安装Ubuntu 16.04的步骤，与之前的版本完全相同，不再赘述。

总的来说，这次的升级没有大的变化，但小的改进还是不少的。

1.内核版本升级到4.4。这个太没存在感了，囧。

2.LibreOffice升级到5.X。外观上更简约了，赞一个。

3.Emacs升级到24.5。提一个细节，以前打开同名文件，文件名的后面按照打开顺序加序号，以示区别，但序号含义很不直观。现在用父文件夹名来区分，好用多了。

下面对使用中遇到的问题，及其解决方法，总结如下：

1.安装Flash插件。

有两个办法——要么安装Chrome，要么将Adobe官方驱动中的libflashplayer.so，安装到~/.mozilla/plugins下。

2.gvfsd-smb-browse进程的CPU占用100%。

这是一个ISP DNS导致的问题。其中一个解决方法：

`sudo apt-get remove gvfs-backends`

