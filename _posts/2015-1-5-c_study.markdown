---
layout: post
title:  C/C++编程心得
category: technology 
---

# 1.

在头文件中定义字符串时，如果该头文件会被多个源文件引用的话，字符串必须被定义为const，否则会有重定义错。当然最好在头文件中只放声明，不要放定义。

使用诸如

{% highlight c %}
#ifndef _COMMON_STRING_
#define _COMMON_STRING_
...
...
...
#endif
{% endhighlight %}

解决不了这个问题。因为这段代码解决的是同一个源文件重复包含某个头文件的问题。而这里的问题是不同的源文件包含同一头文件时，产生的重复定义的问题。const关键字保证了同一标识符只会定义一次。

# 2.

`int (*p)[10]` 先是 ` *p`起作用 ，声明一个指针（p肯定是指针了），然后是[10]（数组说明），则p是指向10个整形元素组成的数组的指针。——数组指针。

若是`int *p[10]`  则首先是[ ]起用，它是一个数组了。然后是*，所以这个数组元素是指针型的。——指针数组。

引申一下

{% highlight c %}
    int a[10];
    printf("%x\n",&a);
    printf("%x\n",a);
{% endhighlight %}

可以看到&a和a的值是相等的，但含义不同。a相当于`int *p`，而&a相当于`int (*p)[10]`。

类似的

`int (*p[])(int)`函数指针数组。

`int (*p())[]`返回数组指针的函数。

`int *p()[]`字面上可以解释为返回指针数组的函数，不过函数是不能返回数组的。

`int *(*a())()`这是一个函数，它没有参数，它的返回值是一个函数指针，这个指针指向的函数，也没有参数，且返回值是int型的指针。

# 3.嵌入式程序员应知道的几个基本问题

http://linux.chinaitlab.com/c/713810.html

# 4.深入理解C++中的mutable关键字

http://dev.yesky.com/393/3007393.shtml

# 5.UNREFERENCED_PARAMETER的作用

http://blog.csdn.net/apunix/archive/2008/01/14/2043945.aspx

# 6.sizeof进行结构体大小的判断

http://blog.csdn.net/van150/archive/2005/12/05/544454.aspx

VC的默认规则基本如上所示，gcc的默认规则就是4字节对齐。

可以比较一下

{% highlight c %}
struct s
{
  char a;
  double b;
  int c;
}
{% endhighlight %}

与

{% highlight c %}
struct s
{
  char a;
  int b;
  double c;
}
{% endhighlight %}

在各个平台上的sizeof值。

附带说一下如果看到以下的代码片段，也就不要觉得惊奇了。

{% highlight c %}
typedef enum _XXX
{
    XXX_0        = 0,
    XXX_1        = 1,
    XXX_FORCE_DWORD    = 0x7FFFFFFF/* 编译器对齐 */
}XXX;
{% endhighlight %}

# 7.字节对齐的设定

1）编译器选项指定

VC：/Zp

gcc：-fpack-struct

2）代码指定

VC和gcc都可以用`#pragma pack(4)`

gcc还可以用`__attribute__((packed))`

# 8.Java中创建对象的时候代码执行顺序(这个问题C++应该也存在)

http://jacob777.blog.sohu.com/106426297.html

# 浮点运算和代码优化

## 1.浮点运算问题

浮点运算在工业中应用非常广泛，但嵌入式CPU通常没有对浮点运算提供直接的硬件支持。而采用标准库提供的软件计算方案，性能又很差。这时就需要使用浮点运算协处理器加速浮点运算。（486之前的PC，CPU和浮点运算协处理器FPU也是分开的，例如i486DX是有FPU的型号，而i486SX则是没有FPU的型号。）

硬件的支持离不开软件的使用。如果在添加了FPU的硬件上，使用浮点计算的软件方案的话，FPU也是不起作用的。因此必须用FPU驱动库函数替换标准库提供的软件方案的相应函数。

最直观的做法是将所有用到浮点计算的地方都替换成FPU函数。例如如下代码：

{% highlight c %}
float a,b,c;
a = b + c;
{% endhighlight %}

假设FPU加法函数的原型为：

`float Add(float a, float b);`

如果我们要使用FPU硬件加速的话，只需要将上述代码改为：

{% highlight c %}
float a,b,c;
a = Add(b,c);
{% endhighlight %}

就可以了。

上面的这种方法显然是直观而正确的，但是却不方便。需要将源代码中，所有涉及到浮点运算的地方都做相应的修改，而且以函数的方式取代C语言中的运算符，本身书写起来也很麻烦。

我们可以这样思考一下，C语言是如何将运算符转换成机器指令的呢？首先编译阶段肯定要做类型判断，整数加法和浮点数加法的指令显然不会相同。而链接阶段，只有符号表的概念，类型也好、运算符也好，都灰飞烟灭了。

因此，我们只要看一看浮点加法的汇编指令，就可以找到相关的符号表了。经查浮点加法对应的符号是__adddf3（gcc下）。因此它的原型就是：

`float64 __adddf3(float64 x, float64 y)`

将FPU函数写成这个样子，然后在链接阶段替换标准库函数就可以了。具体操作如下：

1.使用nm命令查看libgcc.a中的符号表，可以查到__adddf3在_addsub_df.o中。

2.使用ar命令的d选项从libgcc.a中去掉_addsub_df.o。

3.在链接时使用FPU函数库

## 2.立即数计算量的问题

请看以下代码：

{% highlight c %}
float64 a, b,c;
a = 2*PI * (b - c) / 365.25;
{% endhighlight %}

机器执行这段代码会进行几次运算呢？

答案是3次。虽然有4个运算符，但2*PI是在编译阶段运算的。（这可以通过查看生成的汇编代码来验证。）基于同样的理由，我们还可以改进这段代码：

`a = 2*PI / 365.25 * (b - c);`

这样只需要2次运算了。

需要说明的是括号如果不改变运算的顺序的话，是不会改变计算次数的。因此

`a = (2*PI / 365.25) * (b - c);`

和

`a = 2*PI / 365.25 * (b - c);`

是等效的，都只需要2次运算。

## 3.冗余代码的问题

假设我们定义了a函数，但是在其他地方并未使用该函数，我们是否可以认为a函数的代码不会出现在最终的可执行文件中呢？

这个问题至少在gcc没有设置任何参数时，是否定的。不管a函数使用与否，它的代码都会包含在最终的可执行文件中。

对于PC来说，这不是个太大的问题，但对于嵌入式设备来说，任何空间的浪费都是不可接受的。

写到这里，有人会说，使用gcc的-o2选项优化代码，不就可以了吗？遗憾的是，这是不行的。

-o2有什么作用呢？还是上面的例子：

{% highlight c %}
void main()
{
  float64 a, b,c;
  a = 2*PI * (b - c) / 365.25;
}
{% endhighlight %}

如果是-o2选项的话，机器会进行几次运算呢？

答案是0次。这种不涉及到输出结果的计算，直接被忽略掉了。

回到第一个问题。如何做才能在最终的可执行文件中不包含未使用的函数呢？步骤如下：

1. gcc添加-ffunction-sections选项。我们通常的做法是一个.c文件编译生成一个.o文件。而这个.c文件中的函数代码都会包含在.o文件的.text段（section）中。而-ffunction-sections选项会将每个函数放在单独的段中，例如a函数，会被放到.text.a段中。

2. ld添加--gc-sections选项。这个选项的作用是不链接未使用的段。

从上面的步骤可以看出，链接的最小单位既不是.o文件，也不是单个函数，而是段。

使用以上方法生成的程序，理论上没什么问题，但实际中，还是有不方便之处：为每一个函数生成一个段，可以想象可执行文件中会有多少段，而在某些平台上，代码在段之间的跳转是要比段内跳转消耗资源的。

我们可以在链接脚本中合并这些段，以下是一个简单的实例：

{% highlight c %}
.text :
{
  . = ALIGN(4);
  text_start = .;
  *(.text.*)
  . = ALIGN(4);
  text_end = .;
}
{% endhighlight %}

# 宏展开函数的小技巧

有的时候，会使用宏展开的方式定义“伪”函数。

这些“伪”函数有以下特征：

1. 不是真正的函数，而是接受参数的宏。

2. 形式上与普通函数相同。

为了实现这个功能，教科书上给出的做法是这样的：

{% highlight c %}
#define st(x)      do { x } while (0)
#define HAL_DMA_SET_SOURCE( pDesc, src ) \
  st( \
    pDesc->srcAddrH = (uint8)((uint16)(src) >> 8); \
    pDesc->srcAddrL = (uint8)( (uint16)(src) & 0xFF ); \
  )
{% endhighlight %}

但是`do { x } while (0)`在有些编译器上会报warning。最近看Ti的代码的时候，看到了一种更好的办法：

{% highlight c %}
#define st(x)      do { x } while (__LINE__ == -1)
{% endhighlight %}

# C++ 11的新特性

我是在2003年以后学习C++的，后来直到2009年以前，C++都是我的主要工作语言。但由于本人先学的C语言，所以编程的思想一直是函数式的。完成一项任务，无论用C、C++、Java、C#，还是Matlab、Python，风格都是差不多的。这也是后来我对GTK情有独钟的一个重要的原因。

总的来说，我对C++用的多，但理解的却不深。只对单继承、成员函数的封装、访问之类的概念有一定的认识和使用。多重继承、模板会看不会写。更不必提C++ 03和C++ 11的新特性了。最近因为研究Cocos2d-x，而接触到这些新特性，颇有些感觉到自己已经是老古董了.

不过好在Java语言用的还可以，大部分的C++新特性，学起来倒也难不倒我。

1.auto关键字

C++11中引入的auto主要有两种用途：自动类型推断和返回值占位。auto在C++98中的标识临时变量的语义，由于使用极少且多余，在C++11中已被删除。前后两个标准的auto，完全是两个概念。

http://blog.csdn.net/huang_xw/article/details/8760403

2.引入nullprt

http://blog.csdn.net/huang_xw/article/details/8764346

3.仿函数、lambda表达式和闭包

http://www.cnblogs.com/npbool/p/3434757.html

4.C++、Java和C#的lambda表达式的格式

C++

auto func = [=](int x, int y)->int {return x * y;};

Java

Runnable r1 = (int x, int y) -> { return x * y; }

C#

Func<int, int, int> towParams = (x, y) => x * y

# 添加废弃提示

有些类库出于兼容性的考虑，仍然保留了对旧函数的支持。但是继续使用这些函数，显然不是作者的初衷。因此，有必要在编译时，给出废弃的提示。

近日浏览cocos2d-x v3的代码，发现可以这样做：

宏定义：

{% highlight c %}
#if defined(__GNUC__) && ((__GNUC__ >= 4) || ((__GNUC__ == 3) && (__GNUC_MINOR__ >= 1)))
#define CC_DEPRECATED_ATTRIBUTE __attribute__((deprecated))
#elif _MSC_VER >= 1400 //vs 2005 or higher
#define CC_DEPRECATED_ATTRIBUTE __declspec(deprecated)
#else
#define CC_DEPRECATED_ATTRIBUTE
#endif
{% endhighlight %}

宏使用：

`CC_DEPRECATED_ATTRIBUTE static TextureCache * getInstance();`

# 关于引用的一个常见错误、

{% highlight c %}
class Base
{
  public:
    void something(Base& b){}
};

int main()
{
  Base b;
  b.something(Base());
  return 0;           
}
{% endhighlight %}

上面的代码在编译时，会出现如下错误信息：

{% highlight text %}
abc.cpp:12:20: error: no matching function for call to ‘Base::something(Base)’
abc.cpp:12:20: note: candidate is:
abc.cpp:6:7: note: void Base::something(Base&)
abc.cpp:6:7: note: no known conversion for argument 1 from ‘Base’ to ‘Base&’
{% endhighlight %}

这是由于`Base()`生成的是临时变量，将之赋值给一个non-const的引用是不行的。

解决方法是

`void something(const Base& b){}`

可以参看下文：

http://stackoverflow.com/questions/20247525/about-c-conversion-no-known-conversion-for-argument-1-from-some-class-to

