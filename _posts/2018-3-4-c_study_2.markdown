---
layout: post
title:  C/C++编程心得（二）, CPU
category: language 
---

## strtok

strtok函数多用于分割字符串，但它会改变被分割字符串的值。因此，如果该字符串以后还有用的话，需要首先复制该字符串，然后对复制的字符串执行strtok函数。

## malloc与calloc

两者都是动态分配内存。

**主要的不同**：malloc不初始化分配的内存，已分配的内存中可以是任意的值。calloc初始化已分配的内存为0。

**次要的不同**：calloc返回的是一个数组，而malloc返回的是一个对象。

## 惰性求值

http://www.cnblogs.com/gtarcoder/p/4811614.html

c++11实现l延迟调用（惰性求值）

http://www.fuzihao.org/blog/2016/02/10/C-%E5%AE%9E%E7%8E%B0%E6%83%B0%E6%80%A7%E6%B1%82%E5%80%BC/

C++实现惰性求值

## gcc链接器

### gcc和ld的差异

理论上gcc做链接和ld做链接，应该是一样的效果，然而实际情况要复杂一些。有的厂商的工具链会给gcc添加一些环境变量之类的私货，所以两者的行为就变的很有差异了。遇到这种问题，互换是一种好的解决问题的思路。

### 链接顺序

有的链接器对链接顺序有要求，一般按照c代码、自定义库、标准库的顺序来链接，也就是越基础底层的库，越在后面。（这个顺序正好和声明的顺序相反）

`gcc -c ./sparse_matrix.c -o sparse_matrix.o -luserlib -lm`

但是如果有一系列很底层的库，他们太底层了，以至于会出现相互依赖的情况(circular dependence)，那gcc提供了一个option很好的解决了这个情况：

`-Wl,--start-group -lmy_lib -lyour_lib -lhis_lib -Wl,--end-group`

再比如下面的例子：

https://github.com/antkillerfarm/antkillerfarm_crazy/tree/master/helloworld/linux_so

`gcc -o main_link main_link.c -L. -lhello`

这条命令中的main_link.c如果放到`-lhello`之后就会出问题。也考虑使用`--start-group`和`--end-group`之类的链接选项解决链接顺序问题。

参考：

https://stackoverflow.com/questions/27475977/c-undefined-reference-to-sqrt-even-with-lm

C - undefined reference to “sqrt” even with '-lm'

# CPU

https://zhuanlan.zhihu.com/p/29743431

CPU制造的那些事之一：i7和i5其实是孪生兄弟！？

https://zhuanlan.zhihu.com/p/29767262

CPU制造的那些事之二：Die的大小和良品率

https://zhuanlan.zhihu.com/p/31848803

为什么CPU越来越多地采用硅脂而不是焊锡散热？

https://zhuanlan.zhihu.com/p/27624654

CPU风扇停转后会发生什么？CPU凭什么烧不坏

https://zhuanlan.zhihu.com/p/30409360

为什么CPU的频率止步于4G?我们触到频率天花板了吗？

https://zhuanlan.zhihu.com/p/33145828

什么是Speculative Execution？为什么要有它？

http://mp.weixin.qq.com/s/sshhUppVPP6qM7LH1V3nSQ

四位计算机的原理及其实现

https://zhuanlan.zhihu.com/p/33579054

Reset重启后发生了什么？它和关机后再开机有什么区别？

https://zhuanlan.zhihu.com/p/34003929

调试程序时，设置断点的原理是什么？

>Visual Studio有个有趣的特性是debug编译后，会把0xcc（INT 3）填入代码的空隙，这样一旦程序越界就会被VS捕捉而容易发现错误。而0xCCCC在中国的GBK编码是“烫”。有中国程序员翻看内存到代码段会发现很多"烫烫烫"，不明所以，以为发生了什么神奇的事情。

https://zhuanlan.zhihu.com/p/34091597

ARM攒机指南-网络篇

https://zhuanlan.zhihu.com/p/34223088

如何进入BIOS？

https://zhuanlan.zhihu.com/p/34858149

128G的固态硬盘为什么有的标120G，有的标100G？固态硬盘容量背后的秘密

https://zhuanlan.zhihu.com/p/30565679

人工智能技术热潮中，是否存在破解苹果A11处理器的可能？

https://mp.weixin.qq.com/s/UWpp2r0_yDxNyJk-cldVyA

处理器高危漏洞无人幸免？树莓派：我们不受影响

>最近的Meltdown和Spectre漏洞被炒的沸沸扬扬，然而能用python语言讲述复杂的CPU计算原理，这是该文的一大创见。

https://mp.weixin.qq.com/s/v_BsfSFp-LwiCOFKaMIS_g

后摩尔时代，如何给你的CPU减负？

https://mp.weixin.qq.com/s/-2kGkJzjay2WJzIpMs2Adw

IEEE盘点27款震撼世界的芯片

https://mp.weixin.qq.com/s/gpfMOW7gzVa2HhYOlDy2nQ

从Intel和ARM争霸战，看看做芯片有多难

https://zhuanlan.zhihu.com/p/38847308

为什么硬盘转速是5400或者7200这么奇怪的数字？7200转的硬盘一定比5400快吗？

https://zhuanlan.zhihu.com/p/40601422

双通道、四通道内存对游戏重要吗？

# WFST（续）

## 参考

https://www.microsoft.com/en-us/research/wp-content/uploads/2016/11/ParallelizingWFSTSpeechDecoders.ICASSP2016.pdf

《parallelizing WFST speech decoders》

http://www.cs.nyu.edu/~mohri/pub/csl01.pdf

《Weighted Finite-State Transducers in Speech Recognition》

https://blog.csdn.net/l_b_yuan/article/category/6132477

这个专栏包含了4篇WFST的blog

http://djt.qq.com/article/view/507

定制你的语音识别-并行语音识别解码空间

https://blog.csdn.net/lucky_ricky/article/details/77511543

Kaldi WFST 构图 学习

https://blog.csdn.net/dearwind153/article/details/70053704

Kaldi HCLG深入理解

https://zhuanlan.zhihu.com/p/31174085

有限状态自动机和转换器在元音和谐处理中的应用。这篇blog研究的问题相对偏门，但是文末附有若干FST方面的软件资源，可以提供OpenFST之外的选择。

https://www.jianshu.com/p/5eb45c64f3e3

深入浅出理解有限状态机

http://infolocata.com/mirovia/finite-state-transducers-for-natural-language-processing/

Finite-State-Transducers for Natural Language Processing

https://zhuanlan.zhihu.com/p/23664023

构建CTC语音识别解码网络

# 声纹识别

声纹识别关心的“谁在说”，用于解决生物身份确认和识别；而语音识别关心的“说了什么”，用于解决对说话内容的识别。

对测试语音，同样提取mfcc->提取i-vector，然后进行打分，打分的方法有cosine, LDA, PLDA，其中PLDA的效果是最好的，但是需要数据去训练获得参数。

代码的话，推荐kaldi里的sre10/v1，里面有全套的i-vector/PLDA说话人识别系统流程。

这方面的数据集有：

https://ivectorchallenge.nist.gov

NIST i-vector Machine Learning Challenge

参考：

https://zhuanlan.zhihu.com/voicebiometrics

专栏：声纹识别的应用实践

https://www.jianshu.com/p/513dadeef1fd

声纹识别

https://blog.csdn.net/twinkle_star1314/article/details/55049746

声纹识别

https://blog.csdn.net/twinkle_star1314/article/details/55050138

声纹识别2

https://zhuanlan.zhihu.com/p/24425179

End-to-End Voiceprint

