---
layout: post
title:  C/C++编程心得（二）
category: language 
---

## strtok

strtok函数多用于分割字符串，但它会改变被分割字符串的值。因此，如果该字符串以后还有用的话，需要首先复制该字符串，然后对复制的字符串执行strtok函数。

## malloc与calloc

两者都是动态分配内存。

**主要的不同**：malloc不初始化分配的内存，已分配的内存中可以是任意的值。calloc初始化已分配的内存为0。

**次要的不同**：calloc返回的是一个数组，而malloc返回的是一个对象。

## 惰性求值

http://www.cnblogs.com/gtarcoder/p/4811614.html

c++11实现l延迟调用（惰性求值）

http://www.fuzihao.org/blog/2016/02/10/C-%E5%AE%9E%E7%8E%B0%E6%83%B0%E6%80%A7%E6%B1%82%E5%80%BC/

C++实现惰性求值

## gcc链接器

### gcc和ld的差异

理论上gcc做链接和ld做链接，应该是一样的效果，然而实际情况要复杂一些。有的厂商的工具链会给gcc添加一些环境变量之类的私货，所以两者的行为就变的很有差异了。遇到这种问题，互换是一种好的解决问题的思路。

### 链接顺序

有的链接器对链接顺序有要求，一般按照c代码、自定义库、标准库的顺序来链接，也就是越基础底层的库，越在后面。（这个顺序正好和声明的顺序相反）

`gcc -c ./sparse_matrix.c -o sparse_matrix.o -luserlib -lm`

但是如果有一系列很底层的库，他们太底层了，以至于会出现相互依赖的情况(circular dependence)，那gcc提供了一个option很好的解决了这个情况：

`-Wl,--start-group -lmy_lib -lyour_lib -lhis_lib -Wl,--end-group`

再比如下面的例子：

https://github.com/antkillerfarm/antkillerfarm_crazy/tree/master/helloworld/linux_so

`gcc -o main_link main_link.c -L. -lhello`

这条命令中的main_link.c如果放到`-lhello`之后就会出问题。也考虑使用`--start-group`和`--end-group`之类的链接选项解决链接顺序问题。

参考：

https://stackoverflow.com/questions/27475977/c-undefined-reference-to-sqrt-even-with-lm

C - undefined reference to “sqrt” even with '-lm'

# LDA-MLLT

Maximum Likelihood Linear Transform (MLLT)，又名Global Semi-tied Covariance (STC)。因此，在科技文献中，常被称作STC/MLLT。

《Semi-tied Covariance Matrices for Hidden Markov Models》

《Improved feature processing for Deep Neural Networks》

![](/images/img2/MLLT.png)

https://blog.csdn.net/xmdxcsj/article/details/78512652

声学特征变换 STC/MLLT

# WFST

## 概述

Weighted Finite State Transducer是目前解码器模块的关键技术。

论文：

《Speech Recognition with Weighted Finite-State Transducers》

>Mehryar Mohri，法国人，Ecole Polytechnique本科+ENS Ulm硕士+University of Paris 7博士。New York University教授。Google研究顾问。   
>个人主页：   
>https://cs.nyu.edu/~mohri/

https://cs.nyu.edu/~mohri/courses.html

这是Mohri的课程主页。

https://cs.nyu.edu/~mohri/asr12/

作为WFST的发明人，Mohri的Speech Recognition课程在解码器方面有相当大的篇幅。

此外，OpenFst的官网也有一些教程：

http://openfst.org/twiki/bin/view/FST/FstBackground

OpenFst Background Material

其中，最重要的是两个tutorial：

http://openfst.org/twiki/bin/view/FST/FstHltTutorial

OpenFst: An Open-Source, Weighted Finite-State Transducer Library and its Applications to Speech and Language

http://openfst.org/twiki/bin/view/FST/FstSltTutorial

OpenFst: a General and Efficient Weighted Finite-State Transducer Library

以下内容主要参考下文：

http://vsooda.github.io/2016/08/28/wfst/

加权有限状态转换器

## FSM

![](/images/img2/FSM.png)

上图是finite-state machine（也叫finite-state automaton，FSA）的示意图。图中的Node表示State，顾名思义，FSM的State数量是有限的。图中的Edge表示Transition，Edge上的Label表示Input/Event。

FSM的含义是，在某一状态下，获得一个输入，从而产生一个状态转换。例如，上图中在Sleep状态下，如果输入是hungry的话，那么状态就会切换到Eat状态。当然了，输入也可以不改变状态，比如在Sleep状态下，输入是tired的时候。

## FST

![](/images/img2/FST.png)

上图是finite-state transducers的示意图。FST和FSM的差别主要在Edge上的Label。FST收到Input的时候，不仅会发生状态改变，还会产生Output序列。因此，其Label的格式为`input:output`。

## WFST

![](/images/img2/WFST.png)

上图是WFST的示意图。顾名思义，Label上不仅有Input、Output，还有Weight信息，其格式为`input:output/weight`。

在有些图中会碰到$$\epsilon$$. 这个符号在输入时表示不消耗任何输入，在输出位置表示不产生任何输出。

此外，还有格式为`input/weight`的FSM，一般被称为Weighted Finite-State Acceptors。

![](/images/img2/WA.png)

不仅Edge上的Label可以有权重，Node上的Label也可以有权重，如上图所示。没有权重的Label，其权重为1。

例如，上图中：

$$[A](ab)=1\times 1\times 2+2\times 3\times 2=14$$

## 相关的群论知识

WFST是基于半环代数理论的，在介绍半环之前我先简单的说一下群和半群。

**群（Group）**：G为非空集合，如果在G上定义的二元运算*，满足：

（1）封闭性（Closure）：对于任意$$a,b\in G$$,有$$a*b\in G$$;

（2）结合律（Associativity）：对于任意$$a,b,c\in G,(a*b)*c=a*(b*c)$$;

（3）幺元（Identity）：存在幺元e，使得对于任意$$a\in G,e*a=a*e=a$$;

（4）逆元：对于任意$$a\in G$$,存在逆元$$a^{-1}*a=a*a^{-1}=e$$。

则称（G,*）为群。

**半群（Semigroup）**：仅满足封闭性和结合律群称为半群；如果还包含幺元，则成为幺元半群。

**半环（semiring）**：指具有两个二元运算$$+$$和$$\cdot$$的非空集合S，且满足：

（1）$$(S,+),(S,\cdot)$$都是半群；

（2）$$\forall a,b,c\in S,(a+b)c = ac+bc, c(a+b) = ca+cb$$

半环的形式化表示如下：

$$(K, \bigoplus, \bigotimes，0， 1)$$

其中K是一个数集，$$\bigoplus, \bigotimes$$是两个二元操作，’0’和’1’是特定的（designated）零元素和幺元素（不一定是真正的数0和数1）。

常用的半环如下表所示：

| Semiring | Set | $$\oplus$$ | $$\otimes$$ | 0 | 1 |
|:--:|:--:|:--:|:--:|:--:|:--:|
| Boolean | $$\{0,1\}$$ | $$\lor$$ | $$\land$$ | 0 | 1 |
| Probability | $$R_+$$ | $$+$$ | $$\times$$ | 0 | 1 |
| Log | $$R\cup\{-\infty，+\infty\}$$ | $$\oplus_{log}$$ | + | $$+\infty$$ | 0 |
| Tropical | $$R\cup\{-\infty，+\infty\}$$ | min | + | $$+\infty$$ | 0 |
| String | $$\Sigma^*\cup\{\infty\}$$ | $$\land$$ | $$\cdot$$ | $$\infty$$ | $$\epsilon$$ |

在WFST中用的比较多的是log半环和tropical半环。前者对路径概率进行了对数运算，而后者在log半环的基础上，进行了viterbi approximation，也就是用若干路径的概率极值，作为当前概率值，这和动态规划中的viterbi算法是一致的。

接下来定义WFST上的二元运算：

一整条路径的权重$$w[\pi ]=w[e_1]\bigotimes \cdots \bigotimes w[e_k]$$。

多个有限路径集合的权重$$w[R]=\bigoplus_{\pi \in R} w[\pi]$$。

参考：

http://hongjiang.info/semigroup-and-monoid/

半群(semigroup)与幺半群(monoid)

## Sum(Union)

介绍完WFST的定义，再来介绍一下定义在它之上的运算。

![](/images/img2/sum.png)

Sum运算的形式化描述为：

$$[T_1 \oplus T_2](x,y)=[T_1](x,y)\oplus [T_2](x,y)$$

## Product(Concatenation)

![](/images/img2/product.png)

Product运算的形式化描述为：

$$[T_1 \otimes T_2](x,y)=\bigoplus_{x=x_1x_2,y=y_1y_2} [T_1](x_1,y_1)\otimes [T_2](x_2,y_2)$$

## Closure

![](/images/img2/closure.png)

Closure运算的形式化描述为：

$$[T^*](x,y)=\bigoplus_{n=0}^{\infty}[T^n](x,y)$$

## Reversal

![](/images/img2/reversal.png)

Reversal运算的形式化描述为：

$$[\widetilde{T}](x,y)=[T](\widetilde{x},\widetilde{y})$$

## Inversion

![](/images/img2/inversion.png)

Inversion运算的形式化描述为：

$$[T^{-1}](x,y)=[T](y,x)$$

## Projection

![](/images/img2/projection.png)

Projection运算的形式化描述为：

$$[\prod_1(T)](x)=\bigoplus_y[T](x,y)$$

## Composition

Composition用来合并不同级别的转换器。用$$T=T_1\circ T_2$$表示这种操作。

![](/images/img2/composition.png)

Composition运算的形式化描述为：

$$[T_1\circ T_2](x,y)=\bigoplus_z [T_1](x,z)\bigotimes [T_2](z,y)$$

通俗一些的说法就是：

（1）起始状态应该是$$T_1，T_2$$的起始状态

（2）结束状态是$$T_1，T_2$$的结束状态

（3）如果$$q_1$$到$$r_1$$的边$$t_1$$的输出等于$$q_2$$到$$r_2$$的边$$t_2$$的输入，那么$$(q_1,q_2)$$和$$(r_1,r_2)$$应该有一条边，如果是tripical半环，则该边权重是以上两边权重之和。

当$$T_1$$的输出包含$$\epsilon$$，$$T_2$$的输入包含$$\epsilon$$的时候，会导致产生大量多余的边，使得最终结果不正确。这时需要去除$$\epsilon$$-path。细节略。

## Intersection

![](/images/img2/intersection.png)

Intersection运算的形式化描述为：

$$[A_1\cap A_2](x)=[A_1](x)\otimes[A_2](x)$$

Intersection是求两个WFST的公共部分，并把相应的权重相加。

## Difference

![](/images/img2/difference.png)

Difference运算的形式化描述为：

$$[A_1 - A_2](x)=[A_1\cap \overline{A_2}](x)$$

Difference大约是简单操作中最不好懂的了，我足足看了2个小时才看明白。

Difference的字面意思是：从A中去掉B。

比如上图中的A可以接受4个序列：ab,ad,cb,cd。但是ab,cd出现在B中，因此A-B就只有ad和cb了。可以看出，这里的B，其权重是无关紧要的，因此该操作要求B必须是无权重的FST。

Difference的示例也可以很复杂，比如下图就不那么容易看懂了。这也是卡了我2个小时的元凶。

![](/images/img2/difference_2.png)

## Connection

下面的几个运算属于图优化的范畴，因此没有简单的形式化描述，而只有算法流程。但限于篇幅，这里只讲运算的含义，而不讲具体的算法流程。

**既然是优化，则运算前后的FST必然是等价的。**

![](/images/img2/connection.png)

Connection运算用于计算FST的连通性。上图中的状态3，4和初始状态0之间没有连通，所以应该去掉。状态5没有路径到达终止状态2，所以也应该去掉。

## $$\epsilon$$-Removal

![](/images/img2/remove.png)

$$\epsilon$$-Removal运算用于去除FST中的$$\epsilon$$-transitions。

这里分为两步。

**Step1：计算$$\epsilon$$-closures。**closures中两个State的距离被称作$$\epsilon$$-Distances，这里不妨用$$ED(A\to B)$$来表示。

例如上图中：

$$ED(0\to 3)=ED(0\to 1)+ED(1\to 3)=\epsilon:\epsilon/0.2+\epsilon:\epsilon/0.6=\epsilon:\epsilon/0.8$$

**Step2：去除$$\epsilon$$-transitions。**

这里以0->4之间的`a:a/1.6`为例介绍一下计算方法。首先，0->4之间并没有直接的`a:a`连线，但是3->4有`a:a`连线。因此：

$$a:a/0.8+ED(0\to 3)=a:a/0.8+\epsilon:\epsilon/0.8=a:a/1.6$$

