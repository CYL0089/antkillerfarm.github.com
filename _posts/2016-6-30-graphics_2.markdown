---
layout: post
title:  图像处理理论（二）
category: technology 
---

# canny算法(续)

## 双阈值（Double Thresholding）

设定一个阈值上界和阈值下界，图像中的像素点如果大于阈值上界，则认为必然是边界（称为强边界，strong edge），小于阈值下界则认为必然不是边界，两者之间的，被认为是候选项（称为弱边界，weak edge）。

## 滞后的边界跟踪

和强边界相连的弱边界认为是边界，其他的弱边界则被抑制。

参考：

http://www.cse.iitd.ernet.in/~pkalra/csl783/canny.pdf

# 灰度化 

以RGB格式的彩图为例，通常灰度化采用的方法主要有：

方法1：$$Gray=(R+G+B)/3$$

方法2：$$Gray=max(R,G,B)$$

方法3：$$Gray=0.299R+0.587G+0.114B$$（这种参数考虑到了人眼的生理特点）

# 二值化

二值图也就是黑白图。将灰度图转换成黑白图的过程，就是二值化。二值化的一般算法是：

$$
g=\begin{cases}
0,  & f\le t \\
1, & f>t \\
\end{cases}
$$

其中$$t$$被称为阀值。阀值的确定方法有下面几种。

## Otsu法（大津法或最大类间方差法）

该算法是日本人Otsu提出的一种动态阈值分割算法。它的主要思想是按照灰度特性将图像划分为背景和目标2部分（这里我们将$$f\le t$$的部分称为背景，其他部分称为目标。），选取门限值，使得背景和目标之间的方差最大。其步骤如下：

1.建立图像灰度直方图（共有L个灰度级，每个出现概率为$$p_i$$）

$$N=\sum_{i=0}^{L-1}n_i,p_i=\frac{n_i}{N}$$

2.计算背景和目标的出现概率。

$$p_A=\sum_{i=0}^{t}p_i,p_B=\sum_{i=t+1}^{L-1}p_i=1-p_A$$

其中，A和B分别表示背景部分和目标部分。

3.计算A和B两个区域的类间方差。

$$\omega_A=\frac{\sum_{i=0}^{t}ip_i}{p_A},\omega _B=\frac{\sum_{i=t+1}^{L-1}ip_i}{p_B}(公式1)$$

公式1分别计算A和B区域的平均灰度值；

$$\omega_0=p_A\omega_A+p_B\omega_B=\sum_{i=0}^{L-1}ip_i(公式2)$$

公式2计算灰度图像全局的灰度平均值；

$$\sigma^2=p_A(\omega_A-\omega_0)^2+p_B(\omega_B-\omega_0)^2(公式3)$$

公式3计算A、B两个区域的类间方差。

4.针对每一个灰度值，计算类间方差。选择方差最大的灰度值，作为阀值$$t$$。

## 一维交叉熵值法

对于两个分布R和Q，定义其信息交叉熵D如下：

$$R=\{r_1,r_2,...,r_n\},Q=\{q_1,q_2,...,q_n\}$$

$$D(Q,R)=\sum_{k=1}^{n}q_k log_2\frac{q_k}{r_k}$$

注：严格来说，这里定义的是相对熵(relative entropy)，又称为KL散度（Kullback-Leibler divergence）或KL距离，是两个随机分布间距离的度量。从公式可以看出，KL距离和经典概率论中的二项分布有很密切的关系。

交叉熵的严格定义参见：

https://en.wikipedia.org/wiki/Cross_entropy

http://www.voidcn.com/blog/rtygbwwwerr/article/p-5047519.html

二值化过程实际上就是从分布$$R=\{r_1,r_2,...,r_L\}$$到分布$$Q=\{q_A,q_B\}$$的过程。

因此

$$D(t)=\sum_{i=0}^{t}ip_i log_2(\frac{p_i}{\omega_A})+\sum_{i=t+1}^{L-1}ip_i log_2(\frac{p_i}{\omega_B})$$

其中，使得D最小的t即为最小交叉熵意义下的最优阈值。

## 二维Otsu法

Otsu法对噪音和目标大小十分敏感，它仅对类间方差为单峰的图像产生较好的分割效果。

当目标与背景的大小比例悬殊时，类间方差准则函数可能呈现双峰或多峰，此时效果不好，但是Otsu法是用时最少的。

二维Otsu法,在考虑像素点灰度级p的基础上,增加了对像素点邻域平均像素值s的考虑。

如果p比s大很多，说明像素的灰度值远远大于其临域的灰度均值，故而该点很可能是噪声点，反之如果p比s小很多，即该点的像素值比其临域均值小很多，则说明是一个边缘点。这两种点在后续的计算中，都要去除掉。

二维Otsu法的推导过程极为复杂，可参见：

http://blog.csdn.net/likezhaobin/article/details/6915755

# 锐化

锐化是与模糊相反的图像操作，它的主要思想是增大图像色彩（或灰度）的对比度，简单的说就是：让亮的更亮，让暗的更暗。因此，锐化操作和边缘检测有很大的共同点，常用的锐化算法有梯度锐化和拉普拉斯锐化。

## 梯度锐化

$$g=\begin{cases}
f+C,  & G>T \\
f, & G\le T \\
\end{cases}$$

当像素$$(x,y)$$的梯度G大于阀值T时，在旧的像素值f上加上常数C，否则，保持原值。

## 拉普拉斯锐化

$$g=f+\nabla^2f$$

# 图像金字塔

一幅图像的金字塔是一系列以金字塔形状排列的分辨率逐步降低，且来源于同一张原始图的图像集合。

![](/images/article/image_pyramid.png)

图像金字塔在机器视觉和图像压缩领域使用的比较多，比如OpenGL中的纹理处理
。

图像金字塔有两种基本操作：

1.对图像向上采样：PyrUp——图像尺寸加倍。

2.对图像向下采样：PyrDown——图像尺寸减半。

这两种操作由于是针对图像尺寸而言的，因此，其方向和上图所示的金字塔的方向**相反**。

## 高斯金字塔

高斯金字塔是通过高斯平滑和亚采样获得一些列下采样图像，也就是说第K层高斯金字塔通过平滑、亚采样就可以获得K+1层高斯图像，高斯金字塔包含了一系列低通滤波器，其截至频率从上一层到下一层是以因子2逐渐增加，所以高斯金字塔可以跨越很大的频率范围。

## 拉普拉斯金字塔

一般来说，由于PyrDown的过程会损失部分图像信息，因此通常情况下：

$$G_i\neq PyrUp(PyrDown(G_i))$$

为了使PyrUp和PyrDown可逆，这里引入拉普拉斯金字塔的概念。其定义如下：

$$L_i=G_i-PyrUp(G_{i+1})=G_i-Up(G_{i+1})\otimes H_{5x5}$$

其中UP操作是将源图像中位置为(x,y)的像素映射到目标图像的(2x+1,2y+1)位置，$$H_{5x5}$$表示5x5的高斯核。

整个拉普拉斯金字塔运算过程可以通过下图来概括：

![](/images/article/laplacian_pyramid.jpg)

图中最左列和最右列都是高斯金字塔，中间一列是拉普拉斯金字塔。

